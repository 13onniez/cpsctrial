public class Geometry {
    static Rectangle r;


    /**
     * Return true if the point is inside of, or on the boundary of, the rectangle formed by northWest and southeast
     *
     * @param northWest the coordinate of the north west corner of the rectangle
     * @param southEast the coordinate of the south east corner of the rectangle
     * @param point     the point in question
     * @return true if the point is on the boundary or inside the rectangle
     */
    public static boolean rectangleContainsPoint(LatLon northWest, LatLon southEast, LatLon point) {
        // TODO: Task 5: Implement this method

//        double x = northWest.getLatitude(); // x coordinate of upper left
//        double y = northWest.getLongitude(); // y coordinate of upper left
//        double width = (southEast.getLatitude() - northWest.getLatitude());
//        double height = (northWest.getLongitude() - southEast.getLongitude());
//        double pointX = point.getLatitude();
//        double pointY = point.getLongitude();


        int x = (int) northWest.getLatitude(); // x coordinate of upper left
        int y = (int) northWest.getLongitude(); // y coordinate of upper left
        int width = (int) (southEast.getLatitude() - northWest.getLatitude());
        int height = (int) (northWest.getLongitude() - southEast.getLongitude());
        r = new Rectangle(x, y, width, height);


        if (r.contains(point.getLatitude(), point.getLongitude())) {
            return true;
        }


        // redundant
        if ((point.getLatitude() <= (northWest.getLatitude() + width)) &&
                (northWest.getLatitude() <= point.getLatitude()) &&
                (point.getLongitude() <= (northWest.getLongitude() - height))&&
                (northWest.getLongitude() <= point.getLongitude())) {
            return true;
        }




        // on the borders
        return (((between(northWest.getLatitude(), southEast.getLatitude(), point.getLatitude()))) &&
                (between(southEast.getLongitude(), northWest.getLongitude(), point.getLongitude())));


//        int x0 = (int) northWest.getLatitude();
//        int y0 = (int) northWest.getLongitude();
//        int x1 = (int) southEast.getLatitude();
//        int y1 = (int) southEast.getLongitude();
//        int px = (int) point.getLatitude();
//        int py = (int) point.getLongitude();
//
//        return ((px >= x0) && (px <= x1) && (py >= y1) && (py <= y0));


    }

    /**
     * Return true if the rectangle intersects the line
     *
     * @param northWest the coordinate of the north west corner of the rectangle
     * @param southEast the coordinate of the south east corner of the rectangle
     * @param src       one end of the line in question
     * @param dst       the other end of the line in question
     * @return true if any point on the line is on the boundary or inside the rectangle
     */
    public static boolean rectangleIntersectsLine(LatLon northWest, LatLon southEast, LatLon src, LatLon dst) {
        // TODO: Tasks 5: Implement this method

        // if one of the line endpoints inside rectangle
        if ((rectangleContainsPoint(northWest, southEast, src)) ||
                (rectangleContainsPoint(northWest, southEast, dst))) {
            return true;
        }



        double xsrc = src.getLatitude();
        double ysrc = src.getLongitude();
        double xdst = dst.getLatitude();
        double ydst = dst.getLongitude();


        int x = (int) northWest.getLatitude(); // x coordinate of upper left
        int y = (int) northWest.getLongitude(); // y coordinate of upper left
        int width = (int) (southEast.getLatitude() - northWest.getLatitude());
        int height = (int) (northWest.getLongitude() - southEast.getLongitude());


        int x2 = (int) southEast.getLatitude(); //bottom right
        int y2 = (int) southEast.getLongitude();

        Rectangle r1 = new Rectangle(x, y, width, height);
        Line2D l1 = new Line2D.Double(xsrc, ysrc, xdst, ydst);
        System.out.println("l1.intsects(r1) = " + l1.intersects(r1));



        if ((x == xsrc) || (y == ysrc)) {
            return true;
        }
        if ((y == ysrc) || (y == ydst)) {
            return true;
        }
        if ((x2 == xsrc) || (y2 == ysrc)) {
            return true;
        }
        if ((y2 == ysrc) || (y2 == ydst)) {
            return true;

        }
        return l1.intersects(r1);
    }

    /**
     * A utility method that you might find helpful in implementing the two previous methods
     * Return true if x is >= lwb and <= upb
     *
     * @param lwb the lower boundary
     * @param upb the upper boundary
     * @param x   the value in question
     * @return true if x is >= lwb and <= upb
     */
    private static boolean between(double lwb, double upb, double x) {
        return lwb <= x && x <= upb;
    }
}


/*
 }


        int xPoint = (int) point.getLatitude();
        int yPoint = (int) point.getLongitude();
        Point p = new Point(xPoint, yPoint);
        if (!r.contains(p)) {

            if (((between(northWest.getLatitude(), southEast.getLatitude(), point.getLatitude()))) ||
                    (between(northWest.getLongitude(), southEast.getLongitude(), point.getLongitude()))) {
                return true;
            }
 */
